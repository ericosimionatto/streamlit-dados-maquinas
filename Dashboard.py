# ---------------------------------------------
# UNOESC Campos de Joa√ßaba
# P√≥s Gradua√ß√£o em Industria 4.0 e IA
# Discipl√ßina: Digitaliza√ß√£o
# Professor: Natan Cavasin
# Trabalho: Implemetar Dashboard com Streamlit
# Aluno: √ârico Simionatto
# Python, Dataset, Dataframe, Streamlit 
# 14/06/2025
# ---------------------------------------------

# Importando as bibliotecas que ser√£o utilizadas
import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt

# ---------------------------------------------

# Importando a base de dados do arquivo CSV
dados_maq = pd.read_csv("smart_manufacturing_data.csv")
#
# ---------------------------------------------

# Fazer o tratamento do campo de data. Facilia na visualiza√ß√£o e Manipula√ß√£o dos dados
dados_maq['timestamp'] = pd.to_datetime(dados_maq['timestamp'])

# Configurando o layout da pagins do Streamlit
st.set_page_config(layout='wide', page_title='Monitoramento de M√°quinas')

# colorir o fundo da p√°gina com as cores cinza e azul claro
st.markdown(
    """
    <style>
    .reportview-container {
        background-color: #f0f0f0; /* Cinza claro */
    }
    .stApp {
        background-color: #e0f7fa; /* Azul claro */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Configurando o t√≠tulo do Dashboard
st.title(":orange[Dashboard] :orange[para Monitoramento] :orange[de M√°quinas]")



# Estrutura de sele√ß√£o para usu√°rio escolher o que deseja visualizar
# Filtros com sidebar

# Constru√ß√£o para FILTROS (M√°quina, status, Eventos, Datas)
with st.sidebar:

    # Incluir uma imagem no topo da barra lateral
    st.image("https://i2aiportal.blob.core.windows.net/static/content/2022/6/21/883719download.jpg.900x450_q85_crop.jpg", width=200)
    st.header("Filtros de Sele√ß√£o")
          
    # Op√ß√£o em Checkbox. Op√ß√£o para selecionar todas as M√°quinas
    # value=True vem marcado por padr√£o
    todas_maquinas = st.checkbox("Selecionar todas as M√°quinas", value=True) 

    if todas_maquinas:
        
        # Ao marcar/selecionar todas as M√°quinas, dataset ser√° copiado p/ filtro seguinte
        dados_maq_filtrados = dados_maq.copy()
    else:
        
        # Optar por filtro √∫nico ou filtro m√∫ltiplo
        filtro_multiplas_maq = st.checkbox("Filtrar mais de uma M√°quina?")

        if filtro_multiplas_maq:

            # M√°quinas, status e as anomalias: Sele√ß√£o multipla
            machine_filter = st.multiselect("Marque a(s) M√°quinas:", dados_maq['machine'].unique(), default=dados_maq['machine'].unique())
            status_filter = st.multiselect("Marque os Status da M√°quina:", dados_maq['machine_status'].unique(), default=dados_maq['machine_status'].unique())
            anomaly_filter = st.multiselect("Marque um ou mais Indicadores de Anomalia:", dados_maq['anomaly_flag'].unique(), default=dados_maq['anomaly_flag'].unique())

            # Atribuir os par√¢metros de FILTRO multiplo dataframe original
            dados_maq_filtrados = dados_maq[
                (dados_maq['machine'].isin(machine_filter)) &
                (dados_maq['machine_status'].isin(status_filter)) &
                (dados_maq['anomaly_flag'].isin(anomaly_filter))
            ]
        else:
            # Marcar/Selecionar op√ß√£o √∫nica do filtro com selectbox
            machine_filter = st.selectbox("Selecione M√°quina:", dados_maq['machine'].unique())
            status_filter = st.selectbox("Selecione Status da M√°quina:", dados_maq['machine_status'].unique())
            anomaly_filter = st.selectbox("Selecione Indicador de Anomalia:", dados_maq['anomaly_flag'].unique())

            # dados_maq filtrados a partir das sele√ß√µes √∫nicas
            dados_maq_filtrados = dados_maq[
                (dados_maq['machine'] == machine_filter) &
                (dados_maq['machine_status'] == status_filter) &
                (dados_maq['anomaly_flag'] == anomaly_filter)
            ]
    
    # Exibir o Total de registros filtrados
    st.markdown(f"### Total de registros filtrados: {len(dados_maq_filtrados)}")

    st.text("-------------------------------------")
    
    # DATAS, per√≠odo, linha do tempo. Filtro fazendo uso de datas
    st.subheader("Filtrar por Data")

    # Data m√≠nima
    data_min = dados_maq['timestamp'].min().date()

    # Data maxima
    data_max = dados_maq['timestamp'].max().date()

    # Utilizando SLIDER p/ selecionar o intervalo de datas que o usu√°rio deseja visualizar
    data_selecionada = st.slider("Selecionar intervalo de datas:",
                                 min_value=data_min,
                                 max_value=data_max,
                                 value=(data_min, data_max))

    # Aplicando sele√ß√£o/filtro de datas indicado pelo usuario
    dados_maq_filtrados = dados_maq_filtrados[
        (dados_maq_filtrados['timestamp'].dt.date >= data_selecionada[0]) &
        (dados_maq_filtrados['timestamp'].dt.date <= data_selecionada[1])
    ]

# ------------------------------------------------------------------------------------------------------
# Dashboard com Abas

# Cria√ß√£o das abas
abas = st.tabs(["| üìàGR√ÅFICOS", "| üí°AN√ÅLISES", "| üîÑÔ∏è SENSORES: M√©dias", "| üìöCORRELA√á√ÉO Matriz", "| üì•DOWNLOAD DOS DADOS"])

with abas[0]:
    st.header("Principais Gr√°ficos")

    #Pintar o texto de laranja
    st.markdown("<span style='color: green;'>Use os filtros na barra lateral para selecionar as m√°quinas, status e anomalias desejadas</span>", unsafe_allow_html=True) 
    
    

    # 1¬∫ Gr√°fico: Situa√ß√£o das M√°quinas conforme status: histograma
    fig1 = px.histogram(
        dados_maq_filtrados,
        x='machine_status',
        color='machine_status',
        title='Situa√ß√£o geral das M√°quinas por Status',
    )
    st.plotly_chart(fig1, use_container_width=True)

    # 2¬∫ Gr√°fico: Temperaturas m√©dia por m√°quina
    fig2 = px.bar(
        dados_maq_filtrados.groupby('machine')['temperature'].mean().reset_index(),
        x='machine',
        y='temperature',
        title='Temperatura M√©dia x M√°quina'
    )
    st.plotly_chart(fig2, use_container_width=True)


    # 3¬∫ Gr√°fico: Vibra√ß√£o m√©dia por m√°quina
    fig3 = px.line(
        dados_maq_filtrados.groupby('machine')['vibration'].mean().reset_index(),
        x='machine',
        y='vibration',  
        title='Vibra√ß√£o M√©dia x M√°quina'
    )
    st.plotly_chart(fig3, use_container_width=True)

    # 4¬∫ Gr√°fico: Anomalias por tipo de falha: Pizza
    fig4 = px.pie(
        dados_maq_filtrados,        
        color='anomaly_flag',
        names='anomaly_flag',
        title='Anomalias x Tipo de Falha'
    )
    st.plotly_chart(fig4, use_container_width=True)

    # 5¬∫ Gr√°fico: Consumo de energia por m√°quina.
    fig5 = px.line(
        dados_maq_filtrados.groupby('machine')['energy_consumption'].sum().reset_index(),        
        x='machine',
        y='energy_consumption',
        title='Consumo de Energia x M√°quina'
    )   
    st.plotly_chart(fig5, use_container_width=True)

    # 7¬∫ Gr√°fico: Umidade m√©dia por m√°quina
    fig7 = px.line(
        dados_maq_filtrados.groupby('machine')['humidity'].mean().reset_index(),
        x='machine',
        y='humidity',
        title='Umidade M√©dia x M√°quina'
    )
    st.plotly_chart(fig7, use_container_width=True)

    # 8¬∫ Gr√°fico: Press√£o m√©dia por m√°quina
    fig8 = px.bar(
        dados_maq_filtrados.groupby('machine')['pressure'].mean().reset_index(),
        x='machine',
        y='pressure',
        title='Press√£o M√©dia x M√°quina'
    )
    st.plotly_chart(fig8, use_container_width=True)

    # 9¬∫ Gr√°fico: Linha do tempo que mostra a evolu√ß√£o da temperatura
    tempo_temperatura = dados_maq_filtrados.groupby('timestamp')['temperature'].mean().reset_index()
    fig9 = px.line(
        tempo_temperatura,
        x='timestamp',
        y='temperature',
        title='Linha do tempo: evolu√ß√£o da temperatura'
    )
    st.plotly_chart(fig9, use_container_width=True)

    # 10¬∫ Gr√°fico: Umidade por m√°quina tipo boxplot
    fig10 = px.box(
        dados_maq_filtrados,
        x='machine',
        y='humidity',
        title='Situa√ß√£o da Umidade por M√°quina'
    )
    st.plotly_chart(fig10, use_container_width=True)

    # 11¬∫ Gr√°fico: Dispers√£o 3D Press√£o, Temperatura,  Consumo de Energia
    fig11 = px.scatter_3d(
        dados_maq_filtrados,
        x='pressure',
        y='temperature',
        z='energy_consumption',
        color='machine_status',
        opacity=0.7,
        title='Press√£o | Temperatura | Consumo de Energia'
    )
    st.plotly_chart(fig11, use_container_width=True)
    
#---------------------------------------------------------------------------------------------------------------------------
with abas[1]:
    st.header("AN√ÅLISES")

    # Eventos indicando Sim/N√£o "Yes" e "no" na featrure maintenance_required [1 e 0]
    dados_maq_filtrados['maintenance_required'] = dados_maq_filtrados['maintenance_required'].map({'Yes': 1, 'no': 0})

    # M√°quinas que precisam de manuten√ß√£o
    maq_precisa_manut = dados_maq_filtrados[dados_maq_filtrados['maintenance_required'] == 1]
    qtde_maq_manut = maq_precisa_manut['machine'].nunique()

    # Litas a Qtde de m√°quinas que precisam de manuten√ß√£o
    st.markdown(f"### Total de M√°quinas que precisam de manuten√ß√£o: {qtde_maq_manut}")


    # Gr√°fico: Temperatura x Consumo de Energia: dispers√£o
    fig_temperatura_energia = px.scatter(
        dados_maq_filtrados,
        x='temperature',
        y='energy_consumption',
        color='energy_consumption',
        title='Temperatura x Consumo de Energia',
    )
    st.plotly_chart(fig_temperatura_energia, use_container_width=True)    

    # Gr√°fico de Risco de Parada/Interrup√ß√£o
    fig_risco_parada = px.pie(              
        dados_maq_filtrados,        
        color='downtime_risk',
        names='downtime_risk',
        title='Risco de Parada/Interrup√ß√£o'
    )
    st.plotly_chart(fig_risco_parada, use_container_width=True)

    # Gr√°fico 14: Barras agrupadas da m√©dia de temperatura e vibra√ß√£o por status da m√°quina
    media_status = dados_maq_filtrados.groupby('machine_status')[['temperature', 'vibration']].mean().reset_index()
    fig14 = px.bar(
        media_status,
        x='machine_status',
        y=['temperature', 'vibration'],
        barmode='group',
        title='M√©dia de Temperatura e Vibra√ß√£o por Status da M√°quina'
    )
    st.plotly_chart(fig14, use_container_width=True)

# -------------------------------------------------------------------------------------------------------------------------------------------
# Tabela de m√©dias dos sensores por m√°quina
with abas[2]:
    st.header("Sensores: M√©dias por M√°quina")

    # Selecionado as colunas/features que identificam os sensores
    sensores = ['energy_consumption','temperature', 'pressure', 'vibration', 'humidity']

    # Calcular a m√©dia
    medias_por_maquina = dados_maq_filtrados.groupby('machine')[sensores].mean().reset_index()

    # Listar a Tabela. Arredondar as m√©dias e renomear as colunas
    st.dataframe(
        medias_por_maquina.style.format({col: '{:.0f}' for col in sensores}),
        height=400,
        width=000,           
        use_container_width=True,
        hide_index=True,
        column_config={
            'machine': st.column_config.Column("M√°quina", width="medium"),
            'energy_consumption': st.column_config.Column("Consumo de Energia (kWh)", width="small"),
            'temperature': st.column_config.Column("Temperatura (¬∞C)", width="small"),
            'pressure': st.column_config.Column("Press√£o (Pa)", width="small"),
            'vibration': st.column_config.Column("Vibra√ß√£o (m/s¬≤)", width="small"),
            'humidity': st.column_config.Column("Umidade (%)", width="small")
        }
    )    
    
    # Mostrar tabela com o m√°ximos dos sensores de temperatura, vibra√ß√£o, press√£o, umidade e consumo de energia por m√°quina
    st.subheader("Sensores: M√°ximos dos  por M√°quina")
    maximos_por_maquina = dados_maq_filtrados.groupby('machine')[sensores].max().reset_index()
    st.dataframe(
        maximos_por_maquina.style.format({col: '{:.0f}' for col in sensores}),
        height=400,
        width=400,           
        use_container_width=True,
        hide_index=True,
        column_config={
            'machine': st.column_config.Column("M√°quina", width="medium"),
            'energy_consumption': st.column_config.Column("Consumo de Energia (kWh)", width="small"),
            'temperature': st.column_config.Column("Temperatura (¬∞C)", width="small"),
            'pressure': st.column_config.Column("Press√£o (Pa)", width="small"),
            'vibration': st.column_config.Column("Vibra√ß√£o (m/s¬≤)", width="small"),
            'humidity': st.column_config.Column("Umidade (%)", width="small")
        }
    )
        

# -------------------------------------------------------------------------------------------------------------------------------------------
with abas[3]:
    st.header("Matriz de Correla√ß√£o")

    # Selecionar colunas num√©ricas para correla√ß√£o
    colunas_numericas = dados_maq_filtrados.select_dtypes(include=['float64', 'int64'])
    correlacao = colunas_numericas.corr()

    # Plotar matriz de correla√ß√£o com matplotlib
    plt.figure(figsize=(10, 8))
    plt.imshow(correlacao, cmap='coolwarm', aspect='auto')
    plt.colorbar(label='Correla√ß√£o')
    plt.title("Matriz de Correla√ß√£o entre Features")
    st.pyplot(plt)
    plt.close()

# -------------------------------------------------------------------------------------------------------------------------------------------
# Criar nova Aba ou p√°gina para exibir os dados e permitir o download
with abas[4]:
    st.expander("üì• Download dos Dados Filtrados", expanded=True)
    st.markdown("### Dados Filtrados")
    
    # Exibir os dados filtrados em uma tabela
    st.dataframe(dados_maq_filtrados, use_container_width=True)

    # Exibir a quantidade de registros filtrados
    st.markdown(f"### Total de registros: {len(dados_maq_filtrados)}")
    
    # Trazer a quantidade de maquinas
    quantidade_maquinas = dados_maq_filtrados['machine'].nunique()
    st.markdown(f"### Total de M√°quinas: {quantidade_maquinas}")    

    # Trazer a quantidade de colunas
    quantidade_colunas = dados_maq_filtrados.shape[1]   
    st.markdown(f"### Total de Colunas: {quantidade_colunas}")
            

    # Bot√£o para download dos dados filtrados
    csv = dados_maq_filtrados.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Download dos Dados Filtrados (CSV)",
        data=csv,
        file_name='dados_filtrados.csv',
        mime='text/csv'
    )
